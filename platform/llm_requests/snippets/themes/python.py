from ..models import Levels

themes = {
    Levels.BEGINNER: [
        "Syntaxe et variables de base (affectation, conventions de nommage)",
        "Types primitifs (int, float, str, bool)",
        "Chaînes de caractères (f-strings, format, slicing simple)",
        "Conversion de types (int(), str(), float(), bool())",
        "Opérateurs arithmétiques et logiques (+, -, *, /, %, //, **, and, or, not)",
        "Contrôle de flux (if, for, while)",
        "Vérité implicite et booléens (if [], if 0, if 'abc')",
        "Opérateurs d’identité et de comparaison (== vs is, in, not in)",
        "Listes (indexation, slicing, méthodes append/pop)",
        "Indexation négative et slicing avec pas ([::-1])",
        "Tuples (immutabilité, unpacking)",
        "Différence mutable vs immutable (list vs tuple vs str)",
        "Dictionnaires (ajout, accès, get, keys, values)",
        "Ensembles (ajout, intersection, union, différences)",
        "Fonctions simples (def, return, paramètres)",
    ],
    Levels.INTERMEDIATE: [
        "Programmation orientée objet simple (classe, attributs, héritage simple)",
        "Compréhensions de listes, sets et dictionnaires",
        "Fonctions avancées (args, kwargs, lambda)",
        "Portée des variables et closures simples",
        "Fonctions intégrées utiles (enumerate, zip, any, all, min, max...)",
        "Tri et clés de tri (sorted, key=, min/max avec key), tri stable",
        "Gestion des exceptions (try/except/finally/raise)",
        "Itérateurs (iter, next), générateurs (yield)",
        "Mutabilité et paramètres par défaut (piège de la liste mutable)",
        "Fonctions imbriquées, décorateurs simples",
        "Modules standards courants (math, random, datetime)",
        "Expressions régulières de base (re.match, re.search, re.findall)",
        "Manipulation avancée de listes (insertion, suppression, tri in-place)",
        "Manipulation avancée de chaînes (join, split, replace, slicing complexe)",
        "Manipulation avancée de dictionnaires (comprehensions, fusion, tri)",
        "Utilisation d’all() et any() avec générateurs",
    ],
    Levels.EXPERT: [
        "Classes avancées (propriétés, méthodes de classe/instance, attributs statiques)",
        "Méthodes spéciales (__init__, __str__, __len__, __getitem__)",
        "Itérateurs personnalisés (__iter__, __next__), générateurs avancés",
        "Décorateurs avancés (avec paramètres, empilement)",
        "Programmation fonctionnelle (map, filter, reduce, sorted avec key)",
        "Métaclasses et introspection (type(), isinstance(), getattr(), setattr())",
        "Mutabilité avancée et copies (shallow vs deepcopy sur structures imbriquées)",
        "Modules standards puissants (itertools, functools, collections)",
        "Typage et annotations avancées (Union, Optional, Callable, generics simples)",
        "Context managers personnalisés (__enter__, __exit__)",
        "Slots (__slots__) et optimisation mémoire",
        "Async/await basique (exemples avec asyncio.sleep, exécution concurrente)",
    ],
}
